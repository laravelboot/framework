<?php
/**
 * @package LaravelBoot
 *
 * @internal
 *
 * @author mawenpei
 * @date 2017/7/17 10:48
 * @version
 */
namespace LaravelBoot\Foundation\Network\Server;

use LaravelBoot\Foundation\Application;

abstract class ServerBase
{

    protected $serverStartItems = [
    ];

    protected $workerStartItems = [
    ];

    public $swooleServer;

    public function __construct($swooleServer, array $config)
    {
        $this->swooleServer = $swooleServer;
        $this->swooleServer->set($config);
    }

    abstract protected function init();
    abstract protected function setSwooleEvent();

    protected function bootServerStartItem()
    {
        $serverStartItems = array_merge(
            $this->serverStartItems,
            $this->getCustomizedServerStartItems()
        );

        foreach ($serverStartItems as $bootstrap) {
            Application::getInstance()->make($bootstrap)->bootstrap($this);
        }
    }

    protected function bootWorkerStartItem($workerId)
    {
        $workerStartItems = array_merge(
            $this->workerStartItems,
            $this->getCustomizedWorkerStartItems()
        );

        foreach ($workerStartItems as $bootstrap) {
            Application::getInstance()->make($bootstrap)->bootstrap($this, $workerId);
        }
    }

    public function getProcessName()
    {
        return Application::getInstance()->getName();
    }

    public function start()
    {
        $this->setSwooleEvent();

        \swoole_async_set(["socket_dontwait" => 1]);

        $this->bootServerStartItem();
        $this->init();
        sys_echo($this->getProcessName() . ' start success');
        $this->swooleServer->start();
    }

    protected function getCustomizedServerStartItems()
    {
        return [];
    }

    protected function getCustomizedWorkerStartItems()
    {
        return [];
    }

    /**
     * @return string
     */
    protected function getPidFilePath()
    {
        return Application::getInstance()->storagePath() . '/run/' . strtolower(Application::getInstance()->getName()) . '.pid';
    }

    protected function removePidFile()
    {
        $pidFilePath = $this->getPidFilePath();
        if (file_exists($pidFilePath)) {
            unlink($pidFilePath);
        }
    }

    protected function writePid($pid)
    {
        $pidFilePath = $this->getPidFilePath();
        if (false === file_put_contents($pidFilePath, $pid)) {
            sys_error("write pid into $pidFilePath failed");
        }
    }

    public function exceptionHandler()
    {
        $error = error_get_last();
        if (isset($error['type'])) {
            switch ($error['type']) {
                case E_ERROR :
                    $severity = 'ERROR:Fatal run-time errors. Errors that can not be recovered from. Execution of the script is halted';
                    break;
                case E_PARSE :
                    $severity = 'PARSE:Compile-time parse errors. Parse errors should only be generated by the parser';
                    break;
                case E_DEPRECATED:
                    $severity = 'DEPRECATED:Run-time notices. Enable this to receive warnings about code that will not work in future versions';
                    break;
                case E_CORE_ERROR :
                    $severity = 'CORE_ERROR :Fatal errors at PHP startup. This is like an E_ERROR in the PHP core';
                    break;
                case E_COMPILE_ERROR :
                    $severity = 'COMPILE ERROR:Fatal compile-time errors. This is like an E_ERROR generated by the Zend Scripting Engine';
                    break;
                default:
                    $severity = 'OTHER ERROR';
                    break;
            }
            $message = $error['message'];
            $file = $error['file'];
            $line = $error['line'];
            $log = "$message ($file:$line)\nStack trace:\n";
            $trace = debug_backtrace();
            foreach ($trace as $i => $t) {
                if (!isset($t['file'])) {
                    $t['file'] = 'unknown';
                }
                if (!isset($t['line'])) {
                    $t['line'] = 0;
                }
                if (!isset($t['function'])) {
                    $t['function'] = 'unknown';
                }
                $log .= "#$i {$t['file']}({$t['line']}): ";
                if (isset($t['object']) && is_object($t['object'])) {
                    $log .= get_class($t['object']) . '->';
                }
                $log .= "{$t['function']}()\n";
            }
            if (isset($_SERVER['REQUEST_URI'])) {
                $log .= '[QUERY] ' . $_SERVER['REQUEST_URI'];
            }
            file_put_contents(Application::getInstance()->storagePath() . '/logs/server.log',$log,FILE_APPEND);
        }
    }
}